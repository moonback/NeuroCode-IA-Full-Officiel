# GraphQL

GraphQL est un langage de requête pour les API et un runtime pour exécuter ces requêtes avec vos données existantes.

## Installation

```bash
npm install graphql
```

## Caractéristiques Principales

- **Requêtes déclaratives** - obtenez exactement les données dont vous avez besoin
- **Un seul endpoint** pour toutes vos données
- **Type System** fort et validation
- **Introspection** - l'API peut être interrogée pour ses propres capacités

## Schéma GraphQL

```graphql
type Query {
  user(id: ID!): User
  posts: [Post!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
}
```

## Requêtes

```graphql
query {
  user(id: "123") {
    name
    email
    posts {
      title
      content
    }
  }
}
```

## Mutations

```graphql
mutation {
  createPost(title: "Mon titre", content: "Mon contenu") {
    id
    title
    author {
      name
    }
  }
}
```

## Résolution

```javascript
const resolvers = {
  Query: {
    user: (parent, { id }, context) => {
      return context.db.findUserById(id);
    },
    posts: () => {
      return context.db.getAllPosts();
    }
  },
  Mutation: {
    createPost: (parent, args, context) => {
      return context.db.createPost(args);
    }
  }
};
```

## Meilleures Pratiques

- Utilisez des fragments pour réutiliser des parties de requêtes
- Implémentez la pagination pour les listes
- Gérez les erreurs de manière appropriée
- Utilisez des directives pour la logique conditionnelle
- Optimisez les requêtes N+1

## Sécurité

```javascript
const schema = new GraphQLSchema({
  query: new GraphQLObjectType({
    name: 'Query',
    fields: {
      sensitiveData: {
        type: GraphQLString,
        resolve: (parent, args, context) => {
          if (!context.isAuthenticated) {
            throw new Error('Non autorisé');
          }
          return getData();
        }
      }
    }
  })
});
```

## Intégration avec TypeScript

```typescript
import { ObjectType, Field, ID } from 'type-graphql';

@ObjectType()
class User {
  @Field(type => ID)
  id: string;

  @Field()
  name: string;

  @Field(type => [Post])
  posts: Post[];
}
```